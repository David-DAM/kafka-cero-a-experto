package com.davinchicoder.kafka_cero_a_experto.user.infrastructure.event.producer;

import com.davinchicoder.kafka_cero_a_experto.autogenerated.events.user.UserDeactivatedEvent;
import com.davinchicoder.kafka_cero_a_experto.autogenerated.events.user.UserVerificationRequestedEvent;
import com.davinchicoder.kafka_cero_a_experto.common.infrastructure.event.producer.KafkaProducer;
import com.davinchicoder.kafka_cero_a_experto.user.domain.event.UserDeactivatedDomainEvent;
import com.davinchicoder.kafka_cero_a_experto.user.domain.event.UserVerificationRequestedDomainEvent;
import com.davinchicoder.kafka_cero_a_experto.user.domain.port.UserEvent;
import com.davinchicoder.kafka_cero_a_experto.user.infrastructure.event.mapper.UserEventMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class UserEventProducer implements UserEvent {

    private final KafkaProducer kafkaProducer;

    private final UserEventMapper userEventMapper;

    @Value("${app.kafka.topics.user.validation}")
    private String topic;

    @Override
    public void sendUserDeactivatedDomainEvent(UserDeactivatedDomainEvent event) {
        log.info("Sending user deactivated domain event to topic: {}. Event: {}", topic, event);

        UserDeactivatedEvent userDeactivatedEvent = userEventMapper.mapToUserDeactivatedEvent(event);

        kafkaProducer.send(topic, userDeactivatedEvent);
    }

    @Override
    public void sendUserVerificationRequestedDomainEvent(UserVerificationRequestedDomainEvent event) {
        log.info("Sending user verification requested domain event to topic: {}. Event: {}", topic, event);

        UserVerificationRequestedEvent userVerificationRequestedEvent = userEventMapper.mapToUserVerificationRequestedEvent(event);

        kafkaProducer.send(topic, userVerificationRequestedEvent);
    }
}
