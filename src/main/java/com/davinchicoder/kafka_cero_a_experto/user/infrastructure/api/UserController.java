package com.davinchicoder.kafka_cero_a_experto.user.infrastructure.api;

import com.davinchicoder.kafka_cero_a_experto.autogenerated.events.user.UserCreatedEvent;
import com.davinchicoder.kafka_cero_a_experto.common.infrastructure.event.producer.KafkaProducer;
import com.davinchicoder.kafka_cero_a_experto.user.domain.entity.User;
import com.davinchicoder.kafka_cero_a_experto.user.domain.port.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Optional;

@RestController
@RequestMapping("/api/v1/users")
@RequiredArgsConstructor
public class UserController {

    private final KafkaProducer kafkaProducer;
    private final UserRepository userRepository;

    @GetMapping("/create")
    public void createUser() {
        System.out.println("Creating user");
        UserCreatedEvent userCreatedEvent = UserCreatedEvent.newBuilder()
                .setId(1L)
                .setFirstname("David")
                .setLastname("Jimenez")
                .setEmail("support@davichicoder.dev")
                .setRole("USER")
                .setTimestamp(System.currentTimeMillis())
                .build();

        kafkaProducer.send("user.events", userCreatedEvent);
    }

    @GetMapping("/{id}")
    public ResponseEntity<User> getUser(@PathVariable Long id) {
        Optional<User> optionalUser = userRepository.findById(id);

        return optionalUser
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }


}
