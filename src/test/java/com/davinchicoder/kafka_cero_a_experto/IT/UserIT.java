package com.davinchicoder.kafka_cero_a_experto.IT;

import com.davinchicoder.kafka_cero_a_experto.IT.helper.DatabaseHelper;
import com.davinchicoder.kafka_cero_a_experto.IT.helper.KafkaHelper;
import com.davinchicoder.kafka_cero_a_experto.autogenerated.events.user.UserCreatedEvent;
import com.davinchicoder.kafka_cero_a_experto.autogenerated.events.user.UserVerificationRequestedEvent;
import com.davinchicoder.kafka_cero_a_experto.user.domain.entity.User;
import org.apache.avro.generic.GenericRecord;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.test.annotation.DirtiesContext;

import java.util.Objects;
import java.util.stream.StreamSupport;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class UserIT {

    @Autowired
    private KafkaTemplate<String, GenericRecord> kafkaTemplate;

    @Value("${app.kafka.topics.user}")
    private String USER_EVENT_TOPIC;

    @Autowired
    private DatabaseHelper databaseHelper;

    @Autowired
    private KafkaHelper kafkaHelper;

    @BeforeEach
    void setUp() {
        kafkaHelper.refreshTopics();
    }

    @Test
    public void createUser() {

        UserCreatedEvent event = UserCreatedEvent.newBuilder()
                .setId(1L)
                .setFirstname("David")
                .setLastname("Jimenez")
                .setEmail("support@davinchicoder.dev")
                .setRole("USER")
                .setTimestamp(System.currentTimeMillis())
                .build();

        kafkaTemplate.send(USER_EVENT_TOPIC, event);

        User user = databaseHelper.findByIdAndCondition(1L, Objects::nonNull);

        assertNotNull(user);
        assertEquals(event.getFirstname(), user.getFirstname());

        ConsumerRecords<String, GenericRecord> userValidationRecords = kafkaHelper.getUserValidationRecords();

        assertNotNull(userValidationRecords);
        assertEquals(1, userValidationRecords.count());
        boolean isEventSent = StreamSupport.stream(userValidationRecords.spliterator(), false)
                .map(ConsumerRecord::value)
                .anyMatch(record -> UserVerificationRequestedEvent.getClassSchema().getFullName().equals(record.getSchema().getFullName()));

        assertTrue(isEventSent);
    }

}
